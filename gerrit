#!/usr/bin/python

"""Gerrit Tools - commandline tool for searching, checking out gerrit repositories."""

import sys
import os
import argparse
import ConfigParser
import subprocess

_CONFIG = None
_CONFIG_PATH = ['$HOME/.gerrit-tools', '/etc/gerrit-tools', '$PWD']
_CONFIG_FILE = 'config.ini'

def get_config(profile):
	global _CONFIG

	if _CONFIG is None:
		# Find Config File
		configPath = None
		for i,p in enumerate(_CONFIG_PATH):
			p = p.replace('$HOME', os.environ['HOME'])
			p = p.replace('$PWD', os.environ['PWD'])
			_CONFIG_PATH[i] = p
			if os.path.isfile(p + os.sep + _CONFIG_FILE):
				configPath = p + os.sep + _CONFIG_FILE
				break
		if configPath is None:
			print "Can't find %s in %s" % (_CONFIG_FILE, _CONFIG_PATH)

		# Open Config File
		_CONFIG = ConfigParser.ConfigParser()
		_CONFIG.read(configPath)

	if profile is None:
		sections = _CONFIG.sections()
		if len(sections) > 0:
			profile = sections[0]

	return _CONFIG._sections[profile]


def cmd_list(args):
	config = get_config(args.profile)

	p = subprocess.Popen(['ssh', '-p', config['gerrit_port'], config['gerrit_host'],
							'-l', config['gerrit_user'], 'gerrit', 'ls-projects'],
							stdout=subprocess.PIPE)
	for line in p.stdout.readlines():
		if hasattr(args, 'keyword'):
			if line.find(args.keyword) > -1:
				print line.strip()
		else:
			print line.strip()


def cmd_source(args):
	config = get_config(args.profile)

	url = 'ssh://' + config['gerrit_user'] + '@' + config['gerrit_host'] + ':' + config['gerrit_port'] + '/' + args.path

	if args.target is None:
		created_dir = os.path.basename(args.path)
	else:
		created_dir = args.target

	ret = subprocess.call(['git', 'clone', url, created_dir])

	if ret == 0:
		url = config['gerrit_user'] + '@' + config['gerrit_host'] + ':hooks/commit-msg'
		subprocess.call(['scp', '-p', '-P', config['gerrit_port'], url, created_dir + '/.git/hooks/'])

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description=__doc__)
	parser.add_argument('-p', '-P', '--profile', help='set a profile in config.ini.')

	subparsers = parser.add_subparsers()

	# ls
	parser_list = subparsers.add_parser('ls', help='show list of packages')
	parser_list.set_defaults(func=cmd_list)

	# src|source {path}
	parser_source = subparsers.add_parser('src', help='checkout a package')
	parser_source.add_argument('path')
	parser_source.add_argument('target', nargs='?', default=None)
	parser_source.set_defaults(func=cmd_source)

	# search {keyword}
	parser_search = subparsers.add_parser('search', help='search packages')
	parser_search.add_argument('keyword')
	parser_search.set_defaults(func=cmd_list)

	args = parser.parse_args()
	args.func(args)
